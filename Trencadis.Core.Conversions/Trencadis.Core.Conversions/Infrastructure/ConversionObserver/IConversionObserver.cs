// ---------------------------------------------------------------------------------------------------------------------------------------
// <copyright file="IConversionObserver.cs" company="Trencadis">
// Copyright (c) 2016, Trencadis, All rights reserved
// </copyright>
// ---------------------------------------------------------------------------------------------------------------------------------------

namespace Trencadis.Core.Conversions.Infrastructure.ConversionObserver
{
	using System;

	/// <summary>
	/// Abstracts a conversion operation observer
	/// </summary>
	public interface IConversionObserver
	{
		/// <summary>
		/// Notifies the conversion observer of a known fallback to default value for the current conversion operation.
		/// Full details about the conversion tried and the reason of the fallback (through means of a generated - but not thrown - exception instance)
		/// </summary>
		/// <param name="value">The value we are trying to convert</param>
		/// <param name="targetType">The type to which we are trying to convert</param>
		/// <param name="defaultTargetValue">The default value to which we do the fallback</param>
		/// <param name="format">The format provider</param>
		/// <param name="fallbackReason">
		/// The fallback reason.
		/// This is an exception instance (soft-generated by the conversion code, but not thrown) which describes the
		/// fallback reason
		/// </param>
		void NotifyKnownFallbackToDefaultValue(object value, Type targetType, object defaultTargetValue, IFormatProvider format, Exception fallbackReason);

		/// <summary>
		/// Notifies the conversion observer of a caught exception during current conversion operation
		/// </summary>
		/// <param name="value">The value we are trying to convert</param>
		/// <param name="targetType">The type to which we are trying to convert</param>
		/// <param name="defaultTargetValue">The default value to which we do the fallback</param>
		/// <param name="format">The format provider</param>
		/// <param name="conversionException">The caught exception</param>
		void NotifyCaughtConversionException(object value, Type targetType, object defaultTargetValue, IFormatProvider format, Exception conversionException);
	}
}
