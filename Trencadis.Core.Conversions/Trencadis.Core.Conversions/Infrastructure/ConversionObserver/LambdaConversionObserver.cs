// ---------------------------------------------------------------------------------------------------------------------------------------
// <copyright file="LambdaConversionObserver.cs" company="Trencadis">
// Copyright (c) 2016, Trencadis, All rights reserved
// </copyright>
// ---------------------------------------------------------------------------------------------------------------------------------------

namespace Trencadis.Core.Conversions.Infrastructure.ConversionObserver
{
	using System;

	/// <summary>
	/// Implementation of <see cref="IConversionObserver"/> using lambda-define-able actions
	/// </summary>
	public class LambdaConversionObserver : IConversionObserver
	{
		/// <summary>
		/// Callback invoked to notify a known fallback to default value
		/// </summary>
		private readonly Action<object, Type, object, IFormatProvider, Exception> callbackNotifyKnownFallbackToDefaultValue;

		/// <summary>
		/// Callback invoked to notify a caught conversion exception
		/// </summary>
		private readonly Action<object, Type, object, IFormatProvider, Exception> callbackNotifyCaughtConversionException;

		/// <summary>
		/// Initializes a new instance of the <see cref="LambdaConversionObserver"/> class
		/// </summary>
		/// <param name="callbackNotifyKnownFallbackToDefaultValue">Callback invoked to notify a known fallback to default value</param>
		/// <param name="callbackNotifyCaughtConversionException">Callback invoked to notify a caught conversion exception</param>
		public LambdaConversionObserver(
			Action<object, Type, object, IFormatProvider, Exception> callbackNotifyKnownFallbackToDefaultValue,
			Action<object, Type, object, IFormatProvider, Exception> callbackNotifyCaughtConversionException)
		{
			this.callbackNotifyKnownFallbackToDefaultValue = callbackNotifyKnownFallbackToDefaultValue;
			this.callbackNotifyCaughtConversionException = callbackNotifyCaughtConversionException;
		}

		/// <summary>
		/// Notifies the conversion observer of a known fallback to default value for the current conversion operation.
		/// Full details about the conversion tried and the reason of the fallback (through means of a generated - but not thrown - exception instance)
		/// </summary>
		/// <param name="value">The value we are trying to convert</param>
		/// <param name="targetType">The type to which we are trying to convert</param>
		/// <param name="defaultTargetValue">The default value to which we do the fallback</param>
		/// <param name="format">The format provider</param>
		/// <param name="fallbackReason">
		/// The fallback reason.
		/// This is an exception instance (soft-generated by the conversion code, but not thrown) which describes the
		/// fallback reason
		/// </param>
		public void NotifyKnownFallbackToDefaultValue(object value, Type targetType, object defaultTargetValue, IFormatProvider format, Exception fallbackReason)
		{
			var callback = this.callbackNotifyKnownFallbackToDefaultValue;
			if (callback != null)
			{
				callback(value, targetType, defaultTargetValue, format, fallbackReason);
			}
		}

		/// <summary>
		/// Notifies the conversion observer of a caught exception during current conversion operation
		/// </summary>
		/// <param name="value">The value we are trying to convert</param>
		/// <param name="targetType">The type to which we are trying to convert</param>
		/// <param name="defaultTargetValue">The default value to which we do the fallback</param>
		/// <param name="format">The format provider</param>
		/// <param name="conversionException">The caught exception</param>
		public void NotifyCaughtConversionException(object value, Type targetType, object defaultTargetValue, IFormatProvider format, Exception conversionException)
		{
			var callback = this.callbackNotifyCaughtConversionException;
			if (callback != null)
			{
				callback(value, targetType, defaultTargetValue, format, conversionException);
			}
		}
	}
}
